WITH activity AS 
( 	SELECT 
		user_id
		, day
		, customer_segment
 		, CASE 
 			WHEN user_id = LEAD(user_id,  1) OVER (ORDER BY user_id, day) 
				 THEN				
				 	CASE
 					WHEN day + 1 = LEAD(day, 1) OVER (ORDER BY user_id, day) THEN 0
 					ELSE 1
 					END
 			ELSE 1
 			END as last_of_streak 														-- finding and flagging the end of consecutive day streak
 		, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY day ASC) AS total_days_active -- Cumulative calculation of user being 'Active' 
		FROM (
			SELECT 
				user_id
				, day
				, customer_segment
				, COUNT(*) as day_active
			FROM b_total_rides_info		  												-- Getting all days and customer segment of all users after creation day
				WHERE customer_segment = 'Active' 										-- Only focusing on 'Active' Customer Segment
					GROUP BY 
						user_id
						, day
						, customer_segment
			) as b
), 

streak AS 
(
	SELECT 
 	* 
	, CASE 
		WHEN user_id = LAG(user_id, 1) OVER (ORDER BY user_id, day)						-- Combining the flagged end of consecutive days with cumulative calculation to only get max streak values
			THEN total_days_active - LAG(total_days_active, 1) OVER (ORDER BY user_id, day) 
		ELSE total_days_active
		END AS streak
	FROM activity AS a
		WHERE last_of_streak = 1
)

SELECT 
	SUM(streak) as total_active_days
	, COUNT(*) AS Total_active_streaks
	, ROUND(SUM(STREAK) / COUNT(*), 2) AS "consecutive days active average"				-- dividing Total active days with total streak of active days to find average consecutive days of users 
FROM streak

